from queue import PriorityQueue
def greedybestfirstsearch(gr,goal,heuristic):
    open=PriorityQueue()
    close=[]
    open.put((8,'A',0))
    while open:
        hcost,now,cost=open.get()
        if now==goal:
            print("min cost required is",cost)
            break
        close.append(now)
        for edge in gr[now].keys():
            if edge not in close:
                open.put((heuristic[edge],edge,cost+gr[now][edge]))
    print(close)
graph={'A':{'B':1,'C':2},'B':{'D':7,'E':9,'F':4},'C':{'G':4,'H':3,'I':6,'J':8},'H':{'I':1}}
heuristic={'A':8,'B':10,'C':4,'D':15,'E':14,'F':12,'G':7,'H':2,'I':0,'J':4}
greedybestfirstsearch(graph,'I',heuristic)

out-------------------------------------------------------------------------------------------------------
min cost required is 8
['A', 'C']
